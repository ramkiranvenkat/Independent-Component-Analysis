# -*- coding: utf-8 -*-
"""ICA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqs1NZZSQNQ4q6e9ri185OIjJpp6ONGw
"""

from sklearn.datasets import load_digits
from sklearn.decomposition import FastICA
from sklearn.cluster import KMeans
import numpy as np
import matplotlib.pyplot as plt 
from keras.datasets import mnist
from numpy import random

def plotDigit(x):
  plt.gray() 
  plt.matshow(x.reshape(8,8)) 
  plt.show() 
  plt.savefig('8by8.png')

def plot_gallery(images, n_col, n_row,rsv,figname, cmap=plt.cm.gray):
  plt.figure(figsize=(1. * n_col, 1.13 * n_row))
  for i, comp in enumerate(images):
    plt.subplot(n_row, n_col, i + 1)
    plt.imshow(comp.reshape(rsv,rsv), cmap=cmap)
  plt.subplots_adjust(0.01, 0.05, 0.99, 0.93, 0.04, 0.)
  plt.savefig(figname)

nc=5
nr=5
nca = 3;
nra = 3;
noca = nca*nra
noc = nc*nr
X, y = load_digits(return_X_y=True)
transformer = FastICA(n_components=noc, whiten=True)
X_transformed = transformer.fit_transform(X)
comp = transformer.components_
print(X_transformed.shape,y.shape)
print(y)

plot_gallery(comp, nc, nr, 8,'Basis8by8.png')

(X_train, y_train), (X_test, y_test) = mnist.load_data()
print(X_train.shape,type(X_train),y_train.shape,type(y_train))
X_train_reshape = X_train.reshape(len(X_train),784)
transformerN = FastICA(n_components=noc, whiten=True,max_iter=500)
X_transformed = transformerN.fit_transform(X_train_reshape)
comp = transformerN.components_
basisOrderArray = []
maxBasis = 1
for i in range(len(X_transformed)):
  larray = X_transformed[i,:]
  outarg = np.argsort(larray)
  lorder = []
  for j in range(maxBasis):
    lorder.append(outarg[-1-j])
  lorder = np.array(lorder)  
  basisOrderArray.append(np.sort(lorder))

print(comp.shape)
basisOrderArray = np.array(basisOrderArray)
print(basisOrderArray.shape)
plot_gallery(comp, nc, nr, 28,'Basis1028by28.png')

kmeans = KMeans(n_clusters = 10, random_state = 0)
#clusters = kmeans.fit_predict(basisOrderArray)
clusters = kmeans.fit_predict(X_transformed)

classarrayTrain = np.zeros((10,10))
for i in range(len(X_transformed)):
  classarrayTrain[y_train[i],clusters[i]] += 1
for i in range(10):
  classarrayTrain[i,:] = classarrayTrain[i,:]/np.max(classarrayTrain[i,:])
plt.imshow(classarrayTrain)
plt.ylabel('Actual Classes')
plt.xlabel('Current Classes')
plt.savefig('trainBasis.png')

classarrayTrainData = np.zeros((10,noc))
WtArray = {}
init = True
for i in range(len(X_transformed)):
  for j in range(noc): 
    classarrayTrainData[y_train[i],j] += abs(X_transformed[i,j])
  if (y_train[i] == 5):
    if init == True:
      init = False
      for j in range(noc):
        WtArray[j] = []
        WtArray[j].append(X_transformed[i,j])
    else:
      for j in range(noc):
        WtArray[j].append(X_transformed[i,j])
    
for i in range(10):
  classarrayTrainData[i,:] = classarrayTrainData[i,:]/np.max(np.abs(classarrayTrainData[i,:]))
plt.imshow(classarrayTrainData)
plt.ylabel('Actual Classes')
plt.xlabel('Current Classes')
plt.savefig('Weight on Each Basis')

tempm = np.zeros((noc,))
temps = np.zeros((noc,))

for i in range(noc):
  WtArray[i] = np.array(WtArray[i])
  tempm[i] = (np.mean(WtArray[i]))
  temps[i] = (np.std(WtArray[i]))

nog = 10
wtGen = []
for i in range(nog):
  result = 0*comp[0,:]
  for j in range(noc):
    #lwt = random.normal(loc=tempm[j], scale=temps[j])
    #lwt = tempm[j] + temps[j]*random.uniform()
    indices = np.random.choice(WtArray[i], 1000, replace=False)
    lwt = np.mean((indices))
    result = result + lwt*comp[i,:]
  #plt.figure(figsize=(2. * nog, 2.26 * 1))
  plt.subplot(1,nog, i+1)
  plt.imshow(result.reshape(28,28), cmap=plt.cm.gray)

XTestf = transformerN.transform(X_test.reshape(len(X_test),784))

basisOrderArrayTest = []
for i in range(len(XTestf)):
  larray = XTestf[i,:]
  outarg = np.argsort(larray)
  lorder = []
  for j in range(maxBasis):
    lorder.append(outarg[-1-j])
  lorder = np.array(lorder)  
  basisOrderArrayTest.append(np.sort(lorder))
basisOrderArrayTest = np.array(basisOrderArrayTest)
print(basisOrderArrayTest.shape)

#clustersTest = kmeans.predict(basisOrderArrayTest)
clustersTest = kmeans.predict(XTestf)

classarrayTest = np.zeros((10,10))
for i in range(len(XTestf)):
  classarrayTest[y_test[i],clustersTest[i]] += 1
for i in range(10):
  classarrayTest[i,:] = classarrayTest[i,:]/np.max(classarrayTest[i,:])
plt.imshow(classarrayTest)
plt.ylabel('Actual Classes')
plt.xlabel('Current Classes')
plt.savefig('testBasis.png')

print(XTestf.shape,X_transformed.shape)

transformerA = FastICA(n_components=noca, whiten=True,max_iter=500)
X_transformedA = transformerA.fit_transform(comp)
compA = transformerA.components_
plot_gallery(compA, nca, nra, 28,'DoubleICA')